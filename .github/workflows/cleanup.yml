name: Bulk cleanup (manual)

on:
  workflow_dispatch:
    inputs:
      delete_artifacts:
        type: boolean
        default: true
        description: Delete all Actions artifacts

permissions:
  actions: write
  contents: read
  pages: write

concurrency:
  group: repo-cleanup
  cancel-in-progress: false

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel queued & in_progress runs
        uses: actions/github-script@v7
        with:
          script: |
            const [owner, repo] = (process.env.GITHUB_REPOSITORY || '').split('/');
            async function cancelAll(status){
              for await (const resp of github.paginate.iterator(
                github.rest.actions.listWorkflowRunsForRepo,
                { owner, repo, status, per_page: 100 }
              )) {
                const runs = resp.data?.workflow_runs || [];
                for (const run of runs) {
                  try {
                    core.info(`Cancel ${status} ${run.id} — ${run.name}`);
                    await github.rest.actions.cancelWorkflowRun({ owner, repo, run_id: run.id });
                    await new Promise(r => setTimeout(r, 120));
                  } catch (e) {
                    core.warning(`Cancel failed ${run.id}: ${e.message}`);
                  }
                }
              }
            }
            await cancelAll('queued');
            await cancelAll('in_progress');

      - name: Delete completed runs
        uses: actions/github-script@v7
        with:
          script: |
            const [owner, repo] = (process.env.GITHUB_REPOSITORY || '').split('/');
            let n = 0;
            for await (const resp of github.paginate.iterator(
              github.rest.actions.listWorkflowRunsForRepo,
              { owner, repo, status: 'completed', per_page: 100 }
            )) {
              const runs = resp.data?.workflow_runs || [];
              for (const run of runs) {
                try {
                  core.info(`Delete ${run.id} — ${run.name}`);
                  await github.rest.actions.deleteWorkflowRun({ owner, repo, run_id: run.id });
                  n++; await new Promise(r => setTimeout(r, 80));
                } catch (e) {
                  core.warning(`Delete failed ${run.id}: ${e.message}`);
                }
              }
            }
            core.notice(`Deleted ${n} completed runs`);

      - name: Delete artifacts (optional)
        if: ${{ inputs.delete_artifacts }}
        uses: actions/github-script@v7
        with:
          script: |
            const [owner, repo] = (process.env.GITHUB_REPOSITORY || '').split('/');
            let n = 0;
            for await (const resp of github.paginate.iterator(
              github.rest.actions.listArtifactsForRepo,
              { owner, repo, per_page: 100 }
            )) {
              const arts = resp.data?.artifacts || [];
              for (const a of arts) {
                try {
                  core.info(`Delete artifact ${a.id} — ${a.name}`);
                  await github.rest.actions.deleteArtifact({ owner, repo, artifact_id: a.id });
                  n++; await new Promise(r => setTimeout(r, 60));
                } catch (e) {
                  core.warning(`Artifact delete failed ${a.id}: ${e.message}`);
                }
              }
            }
            core.notice(`Deleted ${n} artifacts`);

      - name: Cancel GitHub Pages deployments (best-effort)
        uses: actions/github-script@v7
        with:
          script: |
            const [owner, repo] = (process.env.GITHUB_REPOSITORY || '').split('/');
            try {
              for await (const resp of github.paginate.iterator(
                github.request,
                'GET /repos/{owner}/{repo}/pages/deployments',
                { owner, repo, per_page: 100 }
              )) {
                const list = Array.isArray(resp.data) ? resp.data : (resp.data?.deployments || []);
                for (const d of list) {
                  try {
                    core.info(`Cancel Pages deployment ${d.id} (${d.status})`);
                    await github.request(
                      'POST /repos/{owner}/{repo}/pages/deployments/{deployment_id}/cancel',
                      { owner, repo, deployment_id: d.id }
                    );
                    await new Promise(r => setTimeout(r, 150));
                  } catch (e) {
                    core.warning(`Cancel Pages failed ${d?.id}: ${e.message}`);
                  }
                }
              }
            } catch (e) {
              core.warning(`Pages API not available: ${e.message}`);
            }
