name: Bulk cleanup runs (safe)

on:
  workflow_dispatch:
    inputs:
      delete_artifacts:
        description: 'Usuń też wszystkie artifacts'
        type: boolean
        default: true

permissions:
  actions: write
  contents: read

env:
  OWNER: ${{ github.repository_owner }}
  REPO:  ${{ github.event.repository.name || github.repository.split('/')[1] }}

jobs:
  cancel_and_delete:
    runs-on: ubuntu-latest
    steps:
      - name: Sanity
        run: |
          echo "OWNER=$OWNER"
          echo "REPO=$REPO"
          test -n "$OWNER" && test -n "$REPO"

      - name: Cancel queued & in_progress (all workflows)
        uses: actions/github-script@v7
        with:
          script: |
            const owner = process.env.OWNER;
            const repo  = process.env.REPO;

            async function cancelAll(status) {
              for await (const resp of github.paginate.iterator(
                github.rest.actions.listWorkflowRunsForRepo,
                { owner, repo, status, per_page: 100 }
              )) {
                const runs = resp.data?.workflow_runs || [];
                for (const run of runs) {
                  core.info(`Cancel ${status} ${run.id} — ${run.name}`);
                  try {
                    await github.rest.actions.cancelWorkflowRun({ owner, repo, run_id: run.id });
                    await new Promise(r => setTimeout(r, 120));
                  } catch (e) {
                    core.warning(`Cancel failed ${run.id}: ${e.message}`);
                  }
                }
              }
            }

            await cancelAll('queued');
            await cancelAll('in_progress');

      - name: Delete completed runs (all workflows)
        uses: actions/github-script@v7
        with:
          script: |
            const owner = process.env.OWNER;
            const repo  = process.env.REPO;
            let deleted = 0;

            for await (const resp of github.paginate.iterator(
              github.rest.actions.listWorkflowRunsForRepo,
              { owner, repo, status: 'completed', per_page: 100 }
            )) {
              const runs = resp.data?.workflow_runs || [];
              for (const run of runs) {
                core.info(`Delete ${run.id} — ${run.name}`);
                try {
                  await github.rest.actions.deleteWorkflowRun({ owner, repo, run_id: run.id });
                  deleted++;
                  await new Promise(r => setTimeout(r, 80));
                } catch (e) {
                  core.warning(`Delete failed ${run.id}: ${e.message}`);
                }
              }
            }
            core.notice(`Deleted ${deleted} completed runs`);

      - name: Delete artifacts (optional)
        if: ${{ inputs.delete_artifacts }}
        uses: actions/github-script@v7
        with:
          script: |
            const owner = process.env.OWNER;
            const repo  = process.env.REPO;
            let count = 0;

            for await (const resp of github.paginate.iterator(
              github.rest.actions.listArtifactsForRepo,
              { owner, repo, per_page: 100 }
            )) {
              const arts = resp.data?.artifacts || [];
              for (const art of arts) {
                try {
                  core.info(`Delete artifact ${art.id} — ${art.name}`);
                  await github.rest.actions.deleteArtifact({ owner, repo, artifact_id: art.id });
                  count++;
                  await new Promise(r => setTimeout(r, 60));
                } catch (e) {
                  core.warning(`Artifact delete failed ${art.id}: ${e.message}`);
                }
              }
            }
            core.notice(`Deleted ${count} artifacts`);
