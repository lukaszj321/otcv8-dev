name: Bulk cleanup runs

on:
  workflow_dispatch:
    inputs:
      delete_artifacts:
        description: 'Usuń też wszystkie artifacts'
        type: boolean
        default: true

permissions:
  actions: write
  contents: read

jobs:
  cleanup:
    runs-on: ubuntu-latest

    steps:
      - name: Cancel queued & in_progress
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            async function eachRun(status, handler) {
              for await (const resp of github.paginate.iterator(
                github.rest.actions.listWorkflowRunsForRepo,
                { owner, repo, status, per_page: 100 }
              )) {
                const runs = Array.isArray(resp.data) ? resp.data : (resp.data.workflow_runs || []);
                for (const run of runs) await handler(run);
              }
            }

            await eachRun('queued', async (run) => {
              core.info(`Cancel queued ${run.id} — ${run.name}`);
              await github.rest.actions.cancelWorkflowRun({ owner, repo, run_id: run.id });
              await new Promise(r => setTimeout(r, 150));
            });

            await eachRun('in_progress', async (run) => {
              core.info(`Cancel in_progress ${run.id} — ${run.name}`);
              await github.rest.actions.cancelWorkflowRun({ owner, repo, run_id: run.id });
              await new Promise(r => setTimeout(r, 150));
            });

      - name: Delete completed runs
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            let deleted = 0;

            for await (const resp of github.paginate.iterator(
              github.rest.actions.listWorkflowRunsForRepo,
              { owner, repo, status: 'completed', per_page: 100 }
            )) {
              const runs = Array.isArray(resp.data) ? resp.data : (resp.data.workflow_runs || []);
              for (const run of runs) {
                try {
                  core.info(`Delete ${run.id} — ${run.name}`);
                  await github.rest.actions.deleteWorkflowRun({ owner, repo, run_id: run.id });
                  deleted++;
                  await new Promise(r => setTimeout(r, 100));
                } catch (e) {
                  core.warning(`Delete failed ${run.id}: ${e.message}`);
                }
              }
            }
            core.notice(`Deleted ${deleted} completed runs`);

      - name: Delete artifacts (optional)
        if: ${{ inputs.delete_artifacts }}
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            let count = 0;

            for await (const resp of github.paginate.iterator(
              github.rest.actions.listArtifactsForRepo,
              { owner, repo, per_page: 100 }
            )) {
              const arts = Array.isArray(resp.data) ? resp.data : (resp.data.artifacts || []);
              for (const art of arts) {
                try {
                  core.info(`Delete artifact ${art.id} — ${art.name}`);
                  await github.rest.actions.deleteArtifact({ owner, repo, artifact_id: art.id });
                  count++;
                  await new Promise(r => setTimeout(r, 80));
                } catch (e) {
                  core.warning(`Artifact delete failed ${art.id}: ${e.message}`);
                }
              }
            }
            core.notice(`Deleted ${count} artifacts`);
