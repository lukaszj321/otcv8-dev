name: Build – OTClient v8 (Windows/Linux/macOS/Android)

on:
  workflow_dispatch:
  push:
    paths:
      - "**/*.cpp"
      - "**/*.c"
      - "**/*.h"
      - "**/*.hpp"
      - "**/CMakeLists.txt"
      - "CMakePresets.json"
      - "vcpkg.json"
      - "android/**"
      - ".github/workflows/build_clients.yml"
      - "data/**"
      - "modules/**"
      - "mods/**"
      - "things/**"
      - "otui/**"

concurrency:
  group: build-native-${{ github.ref }}
  cancel-in-progress: true

env:
  # Ustaw triplet per-matrix poniżej
  VCPKG_FEATURE_FLAGS: manifests,versions

jobs:
  desktop:
    name: Desktop (${{ matrix.name }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Windows x64
            os: windows-latest
            triplet: x64-windows-static
            arch: x64
          - name: Linux x64
            os: ubuntu-22.04
            triplet: x64-linux
            arch: x64
          - name: macOS x64 (Intel)
            os: macos-13
            triplet: x64-osx
            arch: x64
          - name: macOS arm64 (Apple Silicon)
            os: macos-14
            triplet: arm64-osx
            arch: arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Tooling (CMake + Ninja)
        uses: lukka/get-cmake@latest

      # vcpkg z cache’em; działa w trybie manifestu (vcpkg.json)
      - name: vcpkg (manifest mode + cache)
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: ${{ runner.temp }}/vcpkg
          # Opcjonalnie przypnij commit vcpkg, by mieć deterministykę:
          # vcpkgGitCommitId: 81d1d1a7b07b8a1f1c0d4e8b4f2a2d1ee9d9a9a0
          vcpkgJsonGlob: vcpkg.json
          additionalCachedPaths: |
            build/vcpkg_installed
          appendedCacheKey: ${{ runner.os }}-${{ matrix.triplet }}
          runVcpkgInstall: true

      - name: System deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev \
            libgl1-mesa-dev libglu1-mesa-dev

      - name: Configure
        shell: bash
        env:
          VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
        run: |
          echo "CMAKE_VERSION=$(cmake --version | head -1)"
          echo "NINJA_VERSION=$(ninja --version)"
          echo "VCPKG_ROOT=${VCPKG_ROOT}"
          cmake -S . -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_TOOLCHAIN_FILE="${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake" \
            -DVCPKG_TARGET_TRIPLET="${{ matrix.triplet }}" \
            -DOPENGL_GL_PREFERENCE=GLVND

      - name: Build
        shell: bash
        run: cmake --build build --config RelWithDebInfo -j 2

      - name: Install to dist (best-effort)
        shell: bash
        run: |
          set -e
          cmake --install build --prefix dist || true
          if [ ! -d dist ]; then
            mkdir -p dist/bin
            if [ "${{ runner.os }}" = "Windows" ]; then
              shopt -s nullglob || true
              cp -f build/*.exe dist/bin/ 2>/dev/null || true
              cp -f build/*.dll dist/bin/ 2>/dev/null || true
              cp -f build/*.pdb dist/bin/ 2>/dev/null || true
            else
              cp -f build/* dist/bin/ 2>/dev/null || true
              cp -f build/*/*.dylib dist/bin/ 2>/dev/null || true
              cp -f build/*/*.so    dist/bin/ 2>/dev/null || true
            fi
          fi

      - name: Bundle runtime assets (cross-platform copy, no rsync)
        shell: bash
        run: |
          mkdir -p dist/assets
          for d in data modules mods things otui; do
            if [ -d "$d" ]; then
              mkdir -p "dist/assets/$d"
              # przenośny copy (działa w bash na wszystkich runnerach)
              cp -R "$d/." "dist/assets/$d/" 2>/dev/null || true
            fi
          done
          echo "Assets bundled:"
          find dist/assets -maxdepth 2 -type d -print || true

      - name: Archive
        shell: bash
        run: |
          PKG="otclient-${{ matrix.arch }}-${{ runner.os }}.zip"
          (cd dist && zip -r "../$PKG" .)
          echo "PACKAGE_NAME=$PKG" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}
          path: ${{ env.PACKAGE_NAME }}
          if-no-files-found: error
          retention-days: 14

  android:
    name: Android (Gradle or NDK)
    runs-on: ubuntu-22.04
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Android SDK/NDK
        uses: android-actions/setup-android@v3
        with:
          packages: |
            platforms;android-34
            build-tools;34.0.0
            ndk;26.1.10909125
            cmake;3.22.1

      - name: Detect Gradle project
        id: detect
        shell: bash
        run: |
          if [ -f "android/app/build.gradle" ] || [ -f "android/app/build.gradle.kts" ]; then
            echo "has_gradle=true" >> $GITHUB_OUTPUT
          else
            echo "has_gradle=false" >> $GITHUB_OUTPUT
          fi

      - name: Build (Gradle)
        if: steps.detect.outputs.has_gradle == 'true'
        working-directory: android
        env:
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
        run: |
          ./gradlew --version
          ./gradlew assembleRelease
          ls -R app/build/outputs || true

      - name: Upload APK/AAB
        if: steps.detect.outputs.has_gradle == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: android-gradle-artifacts
          path: |
            android/app/build/outputs/**/*.apk
            android/app/build/outputs/**/*.aab
          if-no-files-found: warn
          retention-days: 14

      - name: Build (CMake+NDK fallback)
        if: steps.detect.outputs.has_gradle == 'false'
        env:
          ANDROID_NDK: ${{ env.ANDROID_NDK_HOME }}
        run: |
          cmake -S . -B build-android -G Ninja \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_TOOLCHAIN_FILE="$ANDROID_NDK/build/cmake/android.toolchain.cmake" \
            -DANDROID_ABI=arm64-v8a \
            -DANDROID_PLATFORM=24 \
            -DANDROID_STL=c++_static
          cmake --build build-android --config RelWithDebInfo -j 2
          mkdir -p dist-android/lib
          cp -rf build-android/* dist-android/lib/ || true
          mkdir -p dist-android/assets
          for d in data modules mods things otui; do
            if [ -d "$d" ]; then
              mkdir -p "dist-android/assets/$d"
              cp -R "$d/." "dist-android/assets/$d/" 2>/dev/null || true
            fi
          done
          (cd dist-android && zip -r ../otclient-android-ndk.zip .)

      - name: Upload NDK artifacts
        if: steps.detect.outputs.has_gradle == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: otclient-android-ndk.zip
          path: otclient-android-ndk.zip
          if-no-files-found: error
          retention-days: 14
