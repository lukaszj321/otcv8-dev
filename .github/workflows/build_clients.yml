name: Build – OTClient v8 (Windows/Linux/macOS/Android)

on:
  workflow_dispatch:
  push:
    paths:
      - "**/*.cpp"
      - "**/*.c"
      - "**/*.h"
      - "**/*.hpp"
      - "**/CMakeLists.txt"
      - "CMakePresets.json"
      - "vcpkg.json"
      - "android/**"
      - ".github/workflows/build_clients.yml"
      - "data/**"
      - "modules/**"
      - "mods/**"
      - "things/**"
      - "otui/**"

concurrency:
  group: build-native-${{ github.ref }}
  cancel-in-progress: true

env:
  VCPKG_FEATURE_FLAGS: manifests,versions

jobs:
  desktop:
    name: Desktop (${{ matrix.name }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Windows x64
            os: windows-latest
            triplet: x64-windows-static
            arch: x64
          - name: Linux x64
            os: ubuntu-22.04
            triplet: x64-linux
            arch: x64
          - name: macOS x64 (Intel)
            os: macos-13
            triplet: x64-osx
            arch: x64
          - name: macOS arm64 (Apple Silicon)
            os: macos-14
            triplet: arm64-osx
            arch: arm64

    steps:
      # (A) Windows: long paths zanim checkout użyje gita
      - name: Enable Git longpaths (Windows)
        if: runner.os == 'Windows'
        run: git config --global core.longpaths true
        shell: bash

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Tooling (CMake + Ninja)
        uses: lukka/get-cmake@latest

      # (B) Jeżeli w repo nie ma vcpkg.json – utwórz minimalny na potrzeby CI
      - name: Ensure vcpkg.json (temporary if missing)
        shell: bash
        run: |
          if [ ! -f vcpkg.json ]; then
            cat > vcpkg.json <<'JSON'
            {
              "name": "otclient-v8",
              "version-string": "0.1.0-ci",
              "dependencies": [
                "sdl2",
                "openal-soft",
                "physfs",
                "libpng",
                "zlib",
                "brotli",
                "lz4",
                "openssl",
                "freetype"
              ]
            }
            JSON
            echo "Created TEMP vcpkg.json (consider committing a proper one to repo)."
          fi

      # (C) vcpkg – tylko wspierane inputy
      - name: vcpkg (manifest mode)
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: ${{ runner.temp }}/vcpkg
          vcpkgJsonGlob: vcpkg.json
          runVcpkgInstall: true

      - name: System deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev \
            libgl1-mesa-dev libglu1-mesa-dev

      - name: Configure
        shell: bash
        env:
          VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
        run: |
          echo "CMAKE_VERSION=$(cmake --version | head -1)"
          echo "NINJA_VERSION=$(ninja --version)"
          cmake -S . -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_TOOLCHAIN_FILE="${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake" \
            -DVCPKG_TARGET_TRIPLET="${{ matrix.triplet }}" \
            -DOPENGL_GL_PREFERENCE=GLVND

      - name: Build
        shell: bash
        run: cmake --build build --config RelWithDebInfo -j 2

      - name: Install to dist (best-effort)
        shell: bash
        run: |
          set -e
          cmake --install build --pref
