name: Exports (DOCX/EPUB/ZIP)
on:
  push: { branches: [ master ] }
  workflow_dispatch: {}
permissions: { contents: write }
concurrency:
  group: exports
  cancel-in-progress: true

jobs:
  export:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      # Build MkDocs -> site/
      - uses: actions/setup-python@v5
        with: { python-version: "3.x" }
      - run: python -m pip install --upgrade pip
      - run: |
          pip install \
            mkdocs \
            mkdocs-material \
            mkdocs-glightbox \
            mkdocs-macros-plugin \
            mkdocs-git-revision-date-localized-plugin
      - run: mkdocs build

      # Zbierz treść -> DOCX/EPUB + ZIP (bez dotykania package.json)
      - uses: actions/setup-node@v4
        with: { node-version: "20" }
      - run: npm install js-yaml glob --no-save
      - run: node scripts/concat-md.mjs mkdocs.yml OTCv8-Docs.md
      - run: |
          sudo apt-get update
          sudo apt-get install -y pandoc zip
          mkdir -p docs/downloads
          pandoc OTCv8-Docs.md -o docs/downloads/OTCv8-Docs.docx
          pandoc OTCv8-Docs.md -o docs/downloads/OTCv8-Docs.epub --toc
          zip -r docs/downloads/site.zip site
          ls -lh docs/downloads

      # Commit z obsługą zaktualizowanego remote (pull --rebase + retry)
      - name: Commit downloads (robust)
        shell: bash
        run: |
          set -e
          git config user.name "github-actions"
          git config user.email "actions@github.com"

          # 1) Zsynchronizuj lokalny stan z origin/master
          git fetch origin master
          git pull --rebase origin master || true

          # 2) Dodaj wygenerowane pliki (wymuś mimo .gitignore)
          git add -f docs/downloads/OTCv8-Docs.docx docs/downloads/OTCv8-Docs.epub docs/downloads/site.zip || true
          git commit -m "export: DOCX/EPUB/ZIP" || echo "no changes to commit"

          # 3) Push z 3 próbami; w razie kolizji — ponowny rebase i push
          for i in 1 2 3; do
            if git push --force-with-lease; then
              echo "Push OK"
              break
            else
              echo "Push failed (try $i). Rebasing and retrying..."
              git fetch origin master
              git pull --rebase origin master || true
              sleep 2
            fi
          done
