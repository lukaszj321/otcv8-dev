name: Android build (CMake)

on:
  workflow_dispatch:

jobs:
  android:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (with LFS)
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Android cmdline-tools
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: 12266719
          accept-android-sdk-licenses: true
          log-accepted-android-sdk-licenses: true

      - name: Install SDK/NDK/CMake
        run: |
          yes | sdkmanager --licenses
          sdkmanager --install "platforms;android-25" "build-tools;34.0.0" "ndk;21.4.7075529" "cmake;3.22.1"

      - name: Extra build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build p7zip-full curl

      - name: Set NDK env
        run: |
          echo "ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/21.4.7075529" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/21.4.7075529" >> $GITHUB_ENV

      - name: Unpack android_libs.7z
        run: |
          set -e
          if [ ! -f "android/android_libs.7z" ]; then
            echo "::error::Brakuje android/android_libs.7z w repo. Wrzuć plik i uruchom ponownie."
            exit 1
          fi
          7z x android/android_libs.7z -oandroid/android_libs

      # === Build missing libs (arm64) -> libbz2.a, libzip.a ===
      - name: Build libbz2 + libzip if missing (arm64)
        run: |
          set -e
          ROOT="$GITHUB_WORKSPACE/android/android_libs"
          INC="$ROOT/include"
          LIB="$ROOT/lib"
          mkdir -p "$INC" "$LIB"

          # NDK toolchain (arm64, API 24 ~ alias 25)
          NDK="$ANDROID_NDK_ROOT"
          TC="$NDK/toolchains/llvm/prebuilt/linux-x86_64"
          API=24
          TARGET=aarch64-linux-android
          export CC="$TC/bin/${TARGET}${API}-clang"
          export CXX="$TC/bin/${TARGET}${API}-clang++"
          export AR="$TC/bin/llvm-ar"
          export RANLIB="$TC/bin/llvm-ranlib"
          export STRIP="$TC/bin/llvm-strip"

          # === bzip2 (libbz2.a) ===
          if [ ! -f "$LIB/libbz2.a" ]; then
            echo ">> Building bzip2 (static)"
            curl -L -o /tmp/bzip2.tar.gz https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz
            tar -xf /tmp/bzip2.tar.gz -C /tmp
            pushd /tmp/bzip2-1.0.8
            make clean || true
            make -j4 CC="$CC" AR="$AR" RANLIB="$RANLIB" CFLAGS="-fPIC" libbz2.a
            cp libbz2.a "$LIB/"
            cp bzlib.h "$INC/"
            popd
          else
            echo ">> libbz2.a already present"
          fi

          # === libzip (libzip.a + zipconf.h) ===
          if [ ! -f "$LIB/libzip.a" ] || [ ! -f "$INC/zipconf.h" ]; then
            echo ">> Building libzip (static)"
            curl -L -o /tmp/libzip.tar.gz https://libzip.org/download/libzip-1.10.1.tar.gz
            mkdir -p /tmp/libzip && tar -xf /tmp/libzip.tar.gz -C /tmp/libzip --strip-components=1
            cmake -S /tmp/libzip -B /tmp/build-libzip \
              -G Ninja \
              -DCMAKE_TOOLCHAIN_FILE="$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake" \
              -DANDROID_ABI=arm64-v8a \
              -DANDROID_PLATFORM=android-24 \
              -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_SHARED_LIBS=OFF \
              -DZLIB_LIBRARY="$TC/sysroot/usr/lib/$TARGET/libz.a" \
              -DZLIB_INCLUDE_DIR="$TC/sysroot/usr/include" \
              -DBZIP2_INCLUDE_DIR="$INC" \
              -DBZIP2_LIBRARIES="$LIB/libbz2.a" \
              -DENABLE_BZIP2=ON \
              -DCMAKE_INSTALL_PREFIX=/tmp/libzip-install
            cmake --build /tmp/build-libzip -j4
            cmake --install /tmp/build-libzip
            cp /tmp/libzip-install/lib/libzip.a "$LIB/"
            cp /tmp/libzip-install/include/zip.h "$INC/"
            cp /tmp/libzip-install/include/zipconf.h "$INC/"
          else
            echo ">> libzip already present"
          fi

      # === Detect/include/lib (arm64) + wybór LIB dla Boost/LuaJIT ===
      - name: Detect include/lib (arm64-v8a)
        run: |
          set -e
          ROOT="$GITHUB_WORKSPACE/android/android_libs"

          # include preferowane
          INC="$ROOT/arm64-v8a/include"; [ -d "$INC" ] || INC="$ROOT/include"

          # bibloteki: preferuj lib, ale jeśli Boost wyłącznie w lib64 – użyj lib64 dla BOOST
          LIB="$ROOT/arm64-v8a/lib";     [ -d "$LIB" ] || LIB="$ROOT/lib"
          LIB64="$ROOT/lib64"

          echo "== DEBUG (drzewo android_libs) =="
          find "$ROOT" -maxdepth 2 -type d -print | sed 's/^/  /'

          # sprawdź Boost headers i wybierz dir dla boost *.a
          test -d "$INC/boost" || (echo "::error::Brak nagłówków Boost w $INC/boost" && exit 1)
          BOOST_LIBDIR="$LIB"
          ls "$BOOST_LIBDIR"/libboost_*.a >/dev/null 2>&1 || {
            if ls "$LIB64"/libboost_*.a >/dev/null 2>&1; then
              BOOST_LIBDIR="$LIB64"
            else
              echo "::error::Brak bibliotek Boost (libboost_*.a) w $LIB ani $LIB64"
              exit 1
            fi
          }

          # LuaJIT
          LUAJIT_INC="$INC"; [ -d "$INC/luajit-2.0" ] && LUAJIT_INC="$INC/luajit-2.0"
          LUAJIT_LIB="$LIB"
          [ -f "$LUAJIT_LIB/libluajit.a" ] || { [ -f "$LIB64/libluajit.a" ] && LUAJIT_LIB="$LIB64"; }
          [ -f "$LUAJIT_LIB/libluajit.a" ] || (echo "::error::Brak libluajit.a w $LIB ani $LIB64" && exit 1)

          # libzip + zipconf + bzip2
          [ -f "$LIB/libzip.a" ] || (echo "::error::Brak $LIB/libzip.a (po kroku build powinno być)" && exit 1)
          [ -f "$INC/zipconf.h" ] || (echo "::error::Brak $INC/zipconf.h (po kroku build powinno być)" && exit 1)
          [ -f "$LIB/libbz2.a" ] || (echo "::error::Brak $LIB/libbz2.a (po kroku build powinno być)" && exit 1)

          # export
          {
            echo "INC=$INC"
            echo "LIB=$LIB"
            echo "BOOST_LIBDIR=$BOOST_LIBDIR"
            echo "LUAJIT_INC=$LUAJIT_INC"
            echo "LUAJIT_LIB=$LUAJIT_LIB"
          } | tee -a $GITHUB_ENV

      - name: Configure (arm64-v8a)
        run: |
          ROOT="$GITHUB_WORKSPACE/android/android_libs"
          cmake -S . -B build-android-arm64 -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE="$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake" \
            -DANDROID_ABI=arm64-v8a \
            -DANDROID_PLATFORM=android-25 \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_POLICY_VERSION_MINIMUM=3.5 \
            -DBOOST_ROOT="$ROOT" \
            -DBOOST_INCLUDEDIR="$INC" \
            -DBOOST_LIBRARYDIR="$BOOST_LIBDIR" \
            -DBZIP2_INCLUDE_DIR="$INC" \
            -DBZIP2_LIBRARIES="$LIB/libbz2.a" \
            -DLIBZIP_INCLUDE_DIR_ZIP="$INC" \
            -DLIBZIP_INCLUDE_DIR_ZIPCONF="$INC" \
            -DLIBZIP_LIBRARY="$LIB/libzip.a" \
            -DLUAJIT_INCLUDE_DIR="$LUAJIT_INC" \
            -DLUAJIT_LIBRARY="$LUAJIT_LIB/libluajit.a" \
            -DCMAKE_FIND_ROOT_PATH="$ROOT" \
            -DCMAKE_PREFIX_PATH="$ROOT"

      - name: Build (arm64-v8a)
        run: cmake --build build-android-arm64 -j4

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-arm64-build
          path: build-android-arm64/**
          if-no-files-found: warn
