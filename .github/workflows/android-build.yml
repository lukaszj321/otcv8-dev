name: Android build (CMake)

on:
  workflow_dispatch:

jobs:
  android:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (z LFS)
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Android cmdline-tools + pakiety
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: 12266719
          accept-android-sdk-licenses: true
          log-accepted-android-sdk-licenses: true

      - name: Zainstaluj pakiety SDK/NDK/CMake
        run: |
          yes | sdkmanager --licenses
          sdkmanager --install "platforms;android-25"
          sdkmanager --install "build-tools;34.0.0"
          sdkmanager --install "ndk;21.4.7075529"
          sdkmanager --install "cmake;3.22.1"

      - name: Narzędzia systemowe
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build p7zip-full build-essential curl

      - name: Ustaw ścieżki NDK
        run: |
          echo "ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/21.4.7075529" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/21.4.7075529" >> $GITHUB_ENV

      - name: Rozpakuj prebuilt android_libs.7z
        run: |
          set -e
          if [ ! -f "android/android_libs.7z" ]; then
            echo "::error::Brakuje pliku android/android_libs.7z w repo (prekompilowane biblioteki na Androida)."
            exit 1
          fi
          7z x android/android_libs.7z -oandroid/android_libs
          echo "== Zawartość android/android_libs =="
          find android/android_libs -maxdepth 2 -type d -print | sed 's/^/  /'

      - name: Ustal ścieżki INC/LIB (boost, luajit, libzip)
        run: |
          set -e
          ROOT="$GITHUB_WORKSPACE/android/android_libs"
          INC="$ROOT/arm64-v8a/include"; [ -d "$INC" ] || INC="$ROOT/include"
          LIB="$ROOT/arm64-v8a/lib";     [ -d "$LIB" ] || LIB="$ROOT/lib"

          echo "INC=$INC"          | tee -a $GITHUB_ENV
          echo "LIB=$LIB"          | tee -a $GITHUB_ENV
          echo "BOOST_LIBDIR=$LIB" | tee -a $GITHUB_ENV

          LUAJIT_INC="$INC"; [ -d "$INC/luajit-2.0" ] && LUAJIT_INC="$INC/luajit-2.0"
          echo "LUAJIT_INC=$LUAJIT_INC" | tee -a $GITHUB_ENV
          echo "LUAJIT_LIB=$LIB"        | tee -a $GITHUB_ENV

      - name: Zbuduj BZip2 (arm64) jeśli brak
        run: |
          set -e
          if [ -f "$LIB/libbz2.a" ]; then
            echo "libbz2.a już jest — pomijam."
            exit 0
          fi

          echo "Buduję bzip2-1.0.8 dla arm64-v8a…"
          cd /tmp
          curl -L -o bzip2-1.0.8.tar.gz https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz
          tar xf bzip2-1.0.8.tar.gz
          cd bzip2-1.0.8

          API=24
          TOOLCHAIN="$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64"
          TARGET_HOST=aarch64-linux-android
          export CC="$TOOLCHAIN/bin/${TARGET_HOST}${API}-clang"
          export AR="$TOOLCHAIN/bin/llvm-ar"
          export RANLIB="$TOOLCHAIN/bin/llvm-ranlib"

          make clean
          make -j2 CC="$CC" AR="$AR" RANLIB="$RANLIB" CFLAGS="-fPIC -O2" libbz2.a

          mkdir -p "$LIB" "$INC"
          cp -v libbz2.a "$LIB/"
          cp -v bzlib.h "$INC/"

          ls -l "$LIB/libbz2.a"
          echo "BZip2 gotowe."

      - name: Sanity-check bibliotek
        run: |
          set -e
          echo "INC=$INC"
          echo "LIB=$LIB"
          test -d "$INC/boost"       || (echo "::error::Brak nagłówków Boost w $INC/boost" && exit 1)
          test -f "$LIB/libzip.a"    || (echo "::error::Brak $LIB/libzip.a" && exit 1)
          test -f "$LIB/libbz2.a"    || (echo "::error::Brak $LIB/libbz2.a" && exit 1)
          test -f "$LIB/libluajit.a" || (echo "::error::Brak $LIB/libluajit.a" && exit 1)
          test -f "$INC/zipconf.h"   || (echo "::error::Brak $INC/zipconf.h" && exit 1)

      - name: Znajdź GLES/EGL w NDK (r21)
        run: |
          set -e
          GLINC="$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include"

          API=24
          CANDIDATES=()
          CANDIDATES+=("$ANDROID_NDK_ROOT/platforms/android-$API/arch-arm64/usr/lib")
          CANDIDATES+=("$ANDROID_NDK_ROOT/platforms/android-$API/arch-arm64/usr/lib64")
          CANDIDATES+=("$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/aarch64-linux-android")
          CANDIDATES+=("$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/aarch64-linux-android/$API")

          GLESV2=""
          EGL=""
          for d in "${CANDIDATES[@]}"; do
            if [ -f "$d/libGLESv2.so" ] && [ -f "$d/libEGL.so" ]; then
              GLESV2="$d/libGLESv2.so"
              EGL="$d/libEGL.so"
              break
            fi
          done

          if [ -z "$GLESV2" ] || [ -z "$EGL" ]; then
            GLESV2="$(find "$ANDROID_NDK_ROOT" -type f -name 'libGLESv2.so' | head -n1 || true)"
            EGL="$(find "$ANDROID_NDK_ROOT" -type f -name 'libEGL.so' | head -n1 || true)"
          fi

          if [ -z "$GLESV2" ] || [ -z "$EGL" ]; then
            echo "::error::Nie znalazłem libGLESv2.so / libEGL.so w NDK r21."
            exit 1
          fi

          echo "GLINC=$GLINC"   | tee -a $GITHUB_ENV
          echo "GLESV2=$GLESV2" | tee -a $GITHUB_ENV
          echo "EGL=$EGL"       | tee -a $GITHUB_ENV

          echo "== Wybrane =="
          echo "GLESv2: $GLESV2"
          echo "EGL   : $EGL"
          echo "Include: $GLINC"

      - name: (Android/GLES) Utwórz atrapę GLEW
        run: |
          set -e
          STUB="$GITHUB_WORKSPACE/android/glew_stub"
          mkdir -p "$STUB/include/GL" "$STUB/lib"
          # minimalny nagłówek, nie będzie użyty w kodzie dla GLES, ale CMake przestanie marudzić
          cat > "$STUB/include/GL/glew.h" <<'EOF'
          #pragma once
          /* GLEW stub for Android GLES builds */
          EOF
          # mały obiekt żeby biblioteka nie była pusta
          echo "int __glew_stub = 0;" > "$STUB/stub.c"
          gcc -c -o "$STUB/stub.o" "$STUB/stub.c"
          ar rcs "$STUB/lib/libGLEW.a" "$STUB/stub.o"
          rm -f "$STUB/stub.c" "$STUB/stub.o"

          echo "GLEW_INC=$STUB/include" | tee -a $GITHUB_ENV
          echo "GLEW_LIB=$STUB/lib/libGLEW.a" | tee -a $GITHUB_ENV

          ls -l "$GLEW_LIB"
          echo "GLEW stub gotowy."

      - name: Configure (arm64-v8a)
        run: |
          set -e
          ROOT="$GITHUB_WORKSPACE/android/android_libs"

          cmake -S . -B build-android-arm64 -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE="$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake" \
            -DANDROID_ABI=arm64-v8a \
            -DANDROID_PLATFORM=android-25 \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_POLICY_VERSION_MINIMUM=3.5 \
            \
            -DBOOST_ROOT="$ROOT" \
            -DBOOST_INCLUDEDIR="$INC" \
            -DBOOST_LIBRARYDIR="$BOOST_LIBDIR" \
            \
            -DBZIP2_INCLUDE_DIR="$INC" \
            -DBZIP2_LIBRARIES="$LIB/libbz2.a" \
            \
            -DLIBZIP_INCLUDE_DIR_ZIP="$INC" \
            -DLIBZIP_INCLUDE_DIR_ZIPCONF="$INC" \
            -DLIBZIP_LIBRARY="$LIB/libzip.a" \
            \
            -DLUAJIT_INCLUDE_DIR="$LUAJIT_INC" \
            -DLUAJIT_LIBRARY="$LUAJIT_LIB/libluajit.a" \
            \
            -DCMAKE_FIND_ROOT_PATH="$ROOT" \
            -DCMAKE_PREFIX_PATH="$ROOT" \
            \
            -DUSE_OPENGL_ES=ON \
            -DOPENGL_ES=ON \
            -DOPENGL_INCLUDE_DIR="$GLINC" \
            -DOPENGL_opengl_LIBRARY="$GLESV2" \
            -DOPENGL_glx_LIBRARY="$EGL" \
            -DOPENGL_egl_LIBRARY="$EGL" \
            \
            -DGLEW_INCLUDE_DIR="$GLEW_INC" \
            -DGLEW_LIBRARY="$GLEW_LIB"

      - name: Build (arm64-v8a)
        run: cmake --build build-android-arm64 -j 4

      - name: Upload artefakt (build-android-arm64)
        uses: actions/upload-artifact@v4
        with:
          name: build-android-arm64
          path: build-android-arm64/**
