name: Docs rebuild (manual)

on:
  workflow_dispatch: {}

permissions:
  contents: read
  pages: write
  id-token: write
  actions: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  pre-clean:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel queued/in_progress Pages deployments (API)
        uses: actions/github-script@v7
        with:
          script: |
            const [owner, repo] = (process.env.GITHUB_REPOSITORY || '').split('/');
            // best-effort: API Pages deployments
            try {
              for await (const resp of github.paginate.iterator(
                github.request,
                'GET /repos/{owner}/{repo}/pages/deployments',
                { owner, repo, per_page: 100 }
              )) {
                const list = Array.isArray(resp.data) ? resp.data : (resp.data?.deployments || []);
                for (const d of list) {
                  const st = String(d.status || d.state || '').toLowerCase();
                  if (['queued','in_progress','building','pending','deploying'].some(s => st.includes(s))) {
                    try {
                      core.info(`Cancel Pages deployment ${d.id} (${st})`);
                      await github.request(
                        'POST /repos/{owner}/{repo}/pages/deployments/{deployment_id}/cancel',
                        { owner, repo, deployment_id: d.id }
                      );
                      await new Promise(r => setTimeout(r, 150));
                    } catch (e) {
                      core.warning(`Cancel Pages failed ${d?.id}: ${e.message}`);
                    }
                  }
                }
              }
            } catch (e) {
              core.warning(`Pages API not available: ${e.message}`);
            }

      - name: Cancel other queued/in_progress runs of this workflow
        uses: actions/github-script@v7
        env:
          RUN_ID: ${{ github.run_id }}
        with:
          script: |
            const [owner, repo] = (process.env.GITHUB_REPOSITORY || '').split('/');
            const thisRun = Number(process.env.RUN_ID);
            // anuluj inne runy tego SAMEGO workflow
            for await (const { data } of github.paginate.iterator(
              github.rest.actions.listWorkflowRunsForRepo,
              { owner, repo, status: 'queued', per_page: 100 }
            )) {
              for (const run of (data.workflow_runs || [])) {
                if (run.name !== 'Docs rebuild (manual)') continue;
                if (run.id === thisRun) continue;
                try {
                  core.info(`Cancel queued ${run.id} — ${run.name}`);
                  await github.rest.actions.cancelWorkflowRun({ owner, repo, run_id: run.id });
                  await new Promise(r => setTimeout(r, 120));
                } catch (e) {
                  core.warning(`Cancel failed ${run.id}: ${e.message}`);
                }
              }
            }
            for await (const { data } of github.paginate.iterator(
              github.rest.actions.listWorkflowRunsForRepo,
              { owner, repo, status: 'in_progress', per_page: 100 }
            )) {
              for (const run of (data.workflow_runs || [])) {
                if (run.name !== 'Docs rebuild (manual)') continue;
                if (run.id === thisRun) continue;
                try {
                  core.info(`Cancel in_progress ${run.id} — ${run.name}`);
                  await github.rest.actions.cancelWorkflowRun({ owner, repo, run_id: run.id });
                  await new Promise(r => setTimeout(r, 120));
                } catch (e) {
                  core.warning(`Cancel failed ${run.id}: ${e.message}`);
                }
              }
            }

      - name: Cancel default 'pages-build-deployment' runs
        uses: actions/github-script@v7
        with:
          script: |
            const [owner, repo] = (process.env.GITHUB_REPOSITORY || '').split('/');
            // znajdź workflow Pages i anuluj queued/in_progress
            const wfs = await github.paginate(
              github.rest.actions.listRepoWorkflows,
              { owner, repo, per_page: 100 }
            );
            const wf = wfs.find(w => w.name === 'pages-build-deployment');
            if (!wf) {
              core.notice('No pages-build-deployment workflow found.');
            } else {
              const cancelState = async (status) => {
                for await (const { data } of github.paginate.iterator(
                  github.rest.actions.listWorkflowRuns,
                  { owner, repo, workflow_id: wf.id, status, per_page: 100 }
                )) {
                  for (const run of (data.workflow_runs || [])) {
                    try {
                      core.info(`Cancel ${status} Pages run ${run.id}`);
                      await github.rest.actions.cancelWorkflowRun({ owner, repo, run_id: run.id });
                      await new Promise(r => setTimeout(r, 120));
                    } catch (e) {
                      core.warning(`Cancel failed ${run.id}: ${e.message}`);
                    }
                  }
                }
              };
              await cancelState('queued');
              await cancelState('in_progress');
            }

  build-and-deploy:
    needs: pre-clean
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install MkDocs & plugins
        run: |
          python -m pip install --upgrade pip
          pip install \
            mkdocs mkdocs-material mkdocs-glightbox \
            mkdocs-macros-plugin mkdocs-git-revision-date-localized-plugin \
            mkdocs-with-pdf

      - name: Build MkDocs site
        run: mkdocs build -d site

      - name: Assemble single markdown (OTCv8-Docs.md)
        run: |
          printf "# OTCv8 Docs (export)\n\n" > OTCv8-Docs.md
          git ls-files 'docs/**/*.md' | sort | while read f; do
            echo -e "\n\n---\n\n<!-- $f -->\n" >> OTCv8-Docs.md
            cat "$f" >> OTCv8-Docs.md
          done
          mkdir -p site/downloads
          cp OTCv8-Docs.md site/downloads/

      - name: Install pandoc & zip
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc zip

      - name: Export DOCX/EPUB/PDF
        run: |
          pandoc OTCv8-Docs.md -f gfm+hard_line_breaks-raw_html -t docx -o site/downloads/OTCv8-Docs.docx --wrap=none
          pandoc OTCv8-Docs.md -f gfm+hard_line_breaks-raw_html -t epub -o site/downloads/OTCv8-Docs.epub --toc --wrap=none
          sudo apt-get install -y texlive-xetex fonts-dejavu || true
          pandoc OTCv8-Docs.md -o site/downloads/OTCv8-Docs.pdf --pdf-engine=xelatex -V geometry:margin=1in || true
          (cd site && zip -r downloads/site.zip .)

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
